var fs = require('fs');

var jsonPath = null;
var generatedPath_js = null;
var generatedPath_gd = null;

var objDictionnary = {};

function loadJsonClass() {
    if (jsonPath == null) {
        console.log("Error jsonPath undefined, please setup it with typeSync.setPathJson(path);")
        var error = jsonPath.voluntaryError;
    }
    var dirData = fs.readdirSync(jsonPath);
    var i = 0;
    var len = dirData.length;
    while (i < len) {
        let fileName = dirData[i];
        let pathFile = jsonPath + '/' + fileName;
        let obj = JSON.parse(fs.readFileSync(pathFile).toString().trim());
        let typeName = fileName.split(".")[0];
        objDictionnary[typeName] = obj;
        i += 1;
    }
}

function generateFileClass_js() {
    if (generatedPath_js == null) {
        console.log("Error generatedPath_js undefined, please setup it with typeSync.setGeneratedPath_js(path);")
        var error = generatedPath_js.voluntaryError;
    }
    var fileData = "// GENERATED BY BOLT_CLASS_GENERATOR\n";
    var exportClassData = "";
    for (o in objDictionnary) {
        var obj = objDictionnary[o];
        exportClassData += "\nexports." + o + " = " + o;
        var data = "\nclass " + o + " {\n\n";
        data += "   constructor(){"
        for (k in obj) {
            var val = obj[k];
            data += "\n       this." + k + " = ";
            data += getStringData(val);
            data += ";";
        }
        data += '\n }\n\n}\n';
        fileData += data;
    }
    fileData += "\n" + exportClassData;

    fs.writeFileSync(generatedPath_js, fileData);
}


function generateFileClass_gd() {
    if (generatedPath_gd == null) {
        console.log("Error generatedPath_js undefined, please setup it with typeSync.setGeneratedPath_js(path);")
        var error = generatedPath_gd.voluntaryError;
    }
    for (o in objDictionnary) {
        var obj = objDictionnary[o];
        var data = "# GENERATED BY BOLT_CLASS_GENERATOR\n";
        data += "\nclass_name " + o + "\n\n";
        for (k in obj) {
            var val = obj[k];
            data += "\nvar " + k + " = "
            data += getStringData_gd(val);
            data += ";";
        }


        data += "\n\nfunc setData(data):";
        data += add_gd_setData(obj, "");
        data += "\n\treturn self;\n";

        data += "\n\nfunc getData():";
        data += "\n\tvar data = {};"
        data += add_gd_getData(obj, "");
        data += "\n\treturn data;\n";


        fs.writeFileSync(generatedPath_gd + "/" + o + ".gd", data);
    }
}

function add_gd_getData(obj, path) {
    var data = "";
    if (Array.isArray(obj)) {
        let prePath = path;
        if (prePath[prePath.length - 1] == "]"){
            prePath = prePath.substring(0, prePath.lastIndexOf("["));
            data += "\n\tdata" + prePath + ".push([]);"
        }else
            data += "\n\tdata" + prePath + " = [];"

        let i = 0;
        let len = obj.length;
        while (i < len) {
            data += add_gd_getData(obj[i], path + "[" + i + "]");
            i += 1;
        }
    } else if (typeof obj == "object") {
        if (path != "") {
            let prePath = path;
            if (prePath[prePath.length - 1] == "]"){
                prePath = prePath.substring(0, prePath.lastIndexOf("["));
                data += "\n\tdata" + prePath + ".push({});"
            }else
                data += "\n\tdata" + prePath + " = {};";
        }
        for (k in obj)
            data += add_gd_getData(obj[k], path + (path[path.length - 1] == "." ? "" : ".") + k);
    } else {
        let prePath = path;
        if (prePath[prePath.length - 1] == "]"){
            prePath = prePath.substring(0, prePath.lastIndexOf("["));
            data += "\n\tdata" + prePath + ".push(self" + path + ");"
        }else
            data += "\n\tdata" + prePath + " = self" + path + ";"
    }
    return data;
}


function add_gd_setData(obj, path) {
    var data = "";
    if (Array.isArray(obj)) {
        let prePath = path;
        if (prePath[prePath.length - 1] == "]"){
            prePath = prePath.substring(0, prePath.lastIndexOf("["));
            data += "\n\tself" + prePath + ".push([]);"
        }else
            data += "\n\tself" + prePath + " = [];"

        let i = 0;
        let len = obj.length;
        while (i < len) {
            data += add_gd_setData(obj[i], path + "[" + i + "]");
            i += 1;
        }
    } else if (typeof obj == "object") {
        if (path != "") {

            // Looking for gd classe know
            let val = "";
            val = get_gd_class_Type(obj);
            if (val !== null)
                val += '()';
            else
                val = "{}";
            
            let prePath = path;
            if (prePath[prePath.length - 1] == "]"){
                prePath = prePath.substring(0, prePath.lastIndexOf("["));
                data += "\n\tself" + prePath + ".push(" + val + ");"
            }else
                data += "\n\tself" + prePath + " = " + val + ";";
        }
        for (k in obj)
            data += add_gd_setData(obj[k], path + (path[path.length - 1] == "." ? "" : ".") + k);
    } else {
        let prePath = path;
        if (prePath[prePath.length - 1] == "]"){
            prePath = prePath.substring(0, prePath.lastIndexOf("["));
            data += "\n\tself" + prePath + ".push(data" + path + ");"
        }else
            data += "\n\tself" + prePath + " = data" + path + ";"
    }
    return data;
}

function get_gd_class_Type(obj){
    if (obj === null || obj === undefined)
        return null;
    var keyTab = Object.keys(obj);
    var len = keyTab.length;
    if (len == 4 && typeof obj["r"] == "number" && typeof obj["g"] == "number" && typeof obj["b"] == "number" && typeof obj["a"] == "number")
        return "Color";
    if (len == 3 && typeof obj["r"] == "number" && typeof obj["g"] == "number" && typeof obj["b"] == "number")
        return "Color";
    if (len == 3 && typeof obj["x"] == "number" && typeof obj["y"] == "number" && typeof obj["z"] == "number")
        return "Vector3";
    if (len == 2 && typeof obj["x"] == "number" && typeof obj["y"] == "number")
        return "Vector2";
    return null;
}

function getStringData_gd(data) {
    if (data === null) {
        return "null";
    }else if (typeof data == "boolean"){
        return data ? "true" : "false";
    }
    else if (typeof data == typeof "string") {
        return '"' + data + '"';
    }
    else if (typeof data == typeof 42 || data == 0) {
        return "" + data;
    }
    else if (Array.isArray(data)) {
        var i = 0;
        var len = data.length;
        var str = "[ ";
        while (i < len) {
            str += getStringData(data[i]);
            if (i != len - 1)
                str += ",";
            i += 1;
        }
        str += ']';
        return str;
    } else if (typeof data == "object") {

        // VECTOR3
        if (typeof data.x == "number" && typeof data.y == "number" && typeof data.z == "number")
            return "Vector3(" + data.x + ", " + data.y + ", " + data.z + ")";
        // VECTOR2
        if (typeof data.x == "number" && typeof data.y == "number")
            return "Vector2(" + data.x + ", " + data.y + ")";
        var str = "{";
        var i = 0;
        let len = Object.keys(data).length;
        for (k in data) {
            str += "" + k + " : "
            str += getStringData(data[k]);
            if (i != len - 1)
                str += ",   ";
            i += 1;
        }
        str += '}';
        return str;
    } else
        console.log("TYPE UNKNOW");
}

function getStringData(data) {
    if (data == null) {
        return "null";
    }
    else if (typeof data == "boolean"){
        return data ? "true" : "false";
    }
    else if (typeof data == typeof "string") {
        return '"' + data + '"';
    }
    else if (typeof data == typeof 42 || data == 0) {
        return "" + data;
    }
    else if (Array.isArray(data)) {
        var i = 0;
        var len = data.length;
        var str = "[ ";
        while (i < len) {
            str += getStringData(data[i]);
            if (i != len - 1)
                str += ",";
            i += 1;
        }
        str += ']';
        return str;
    } else if (typeof data == "object") {
        var str = "{";
        var i = 0;
        let len = Object.keys(data).length;
        for (k in data) {
            str += "" + k + " : "
            str += getStringData(data[k]);
            if (i != len - 1)
                str += ",   ";
            i += 1;
        }
        str += '}';
        return str;
    } else
        console.log("TYPE UNKNOW");
}


function getCopy(type) {
    var objRef = objDictionnary[type];
    var objCpy = {};
    setCpyDico(objCpy, objRef);
    return objCpy;
}

function setCpyDico(target, source) {
    for (k in source) {
        var val = source[k];
        if (typeof val == "object") {
            let obj = {};
            setCpyDico(obj, val);
            target[k] = obj;
        } else if (Array.isArray(val)) {
            var tab = [];
            setCpyTab(tab, val);
            target[k] = tab;
        } else {
            target[k] = val;
        }
    }
}

function setCpyTab(target, source) {

    let i = 0;
    let len = source.length;
    while (i < len) {
        let val = source[i];
        if (typeof val == 'object') {
            let obj = {};
            setCpyDico(obj, val);
            target.push(obj);
        } else if (Array.isArray(val)) {
            var tab = [];
            setCpyTab(tab, val);
            target.push(tab);
        } else {
            target.push(val);
        }
        i += 1;
    }
}


function isSameType(data, ref){
    if (ref === null)
        return true;
    if (data === null || data === undefined)
        return false;
    
    for (k in ref){
        let valRef = ref[k];
        let val = data[k];
        if (valRef === null)
            continue;
        else if (typeof valRef == typeof val){
            if (typeof valRef == "object"){
                if (Array.isArray(valRef) != Array.isArray(val))
                    return false;
                else if(!Array.isArray(valRef)){
                    for (k2 in valRef){
                        if (!isTypeOf(val[k2], valRef[k2]))
                            return false;
                    }
                }
            }
        }else
            return false;
    }
    return true;
}


exports.setPathJson = (path) => { jsonPath = path };
exports.setGeneratedPath_js = (path) => { generatedPath_js = path };
exports.setGeneratedPath_gd = (path) => { generatedPath_gd = path };
exports.loadJsonClass = loadJsonClass;
exports.generateFileClass_js = generateFileClass_js;
exports.generateFileClass_gd = generateFileClass_gd;
exports.getCopy = getCopy;
exports.isSameType = isSameType; 